(define a 1)
a
(define b '(1 2 3))
b
(define c (- 5 2))
c
(define d '(+ 2 3))
d
(define test b)
test
(+ a 3)
(define a 2)
(* a 4)
((lambda (x) (* x -2)) 3)
((lambda (x) (/ x 2)) a )
((lambda (x y) (* x y)) 3 5)
((lambda (x y) (* x y)) a 5)
(define plus1 (lambda (x) (+ x 1)))
(plus1 3)
(define mul1 (lambda (x) (* x a)))
(mul1 a)
(define plus2 (lambda (x) (+ (plus1 x) 1)))
(plus2 4)
(define plus3 (lambda (x) (+ (plus1 x) a)))
(plus3 a)
(define mul2 (lambda (x) (* (plus1 x) -2)))
(mul2 7)
(define lastitem (lambda (ls) (cond ((null? (cdr ls)) (car ls)) (#T (lastitem (cdr ls))))))
(lastitem '((2 3) (4 5) 6))
(define square (lambda (x) (* x x)))
(define yourfunc (lambda (x func) (func x)))
(yourfunc 3 square)
(define square (lambda (x) (* x x)))
(define multwo (lambda (x) (* 2 x)))
(define newfun (lambda (fun1 fun2 x) (fun2 (fun1 x))))
(newfun square multwo 10)
(define cube (lambda (n) (define sqrt (lambda (n) (* n n))) (* (sqrt n) n)))
(cube 4)